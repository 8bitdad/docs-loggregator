---
title: Loggregator Guide for Cloud Foundry Operators
---

This topic contains information about the [Loggregator System](./architecture.html) that may be of use to operators of Cloud Foundry deployments.

## <a id='scaling'></a> Scaling Loggregator ##

[Dopplers](./architecture.html#doppler) are components that take in log and metric data from <%= vars.product_full %> system components and store this data in a buffer before periodically forwarding it to the [Traffic Controller](./architecture.html#traffic-controller), which serves up the aggregated data stream through the Firehose WebSocket endpoint. When input from [Metron](./architecture.html#metron) agents exceeds a doppler's buffer size for a given interval, log and metric data can be lost. There are several ways to minimize this loss.

<% if vars.product_full == "Elastic Runtime" %>

### Increase buffer size

1. In the **PCF Ops Manager Installation Dashboard**, click the **Elastic Runtime** tile.
1. Select **System Logging**.
1. Increase the drain buffer size to prevent loss of log data.
1. Click **Save**.
1. Click **Apply Changes**.
<%= image_tag 'ert_syslog_config.png' %>

### Add additional Doppler instances

1. In the **PCF Ops Manager Installation Dashboard**, click the **Elastic Runtime** tile.
1. Select **Resource Config**.
1. Increase the number in the **Instances** column and the **Doppler Server** row.
  <%= image_tag 'loggregator_config.png' %>
1. Click **Save**.
1. Click **Apply Changes**.

### Add additional Traffic Controller instances

1. In the **PCF Ops Manager Installation Dashboard**, click the **Elastic Runtime** tile.
1. Select **Resource Config**.
1. Increase the number in the **Instances** column and the **Loggregator Trafficcontroller** row.
  <%= image_tag 'loggregator_config.png' %>
1. Click **Save**.
1. Click **Apply Changes**.


<% elsif vars.product_full == "Cloud Foundry" %>

### Increase buffer size

The doppler internal buffer size can be increased by changing the `doppler.message\_drain\_buffer\_size property` from its default value of 100 in your CloudFoundry BOSH deployment manifest.

### Add additional Doppler instances

The number of doppler servers can be increased by modifying the `instances` property for the `doppler\_z1` and `doppler\_z2` jobs in your CloudFoundry BOSH deployment manifest.

<% end %>

## <a id='scaling-nozzles'></a> Scaling Nozzles

Scale [nozzles](./architecture.html#nozzles) by using the subscription ID, which is specified when the nozzle connects to the Firehose. If you use the same subscription ID on each nozzle instance, the Firehose will evenly distribute events across all instances of the nozzle. For example, if you have two nozzles with the same subscription ID, then half the events will go to one nozzle and half to the other. Similarly, if there were three instances of the nozzle, then each instance would get one-third the traffic.

A stateless nozzle should handle scaling gracefully. If the nozzle buffers or caches the data, the nozzle author must test what happens when the nozzle is scaled up or scaled down.

## <a id='slow-noz'></a> Slow Nozzle Alerts ##

The [Traffic Controller](./architecture.html#traffic-controller) alerts nozzles if they are consuming events too slowly. If the nozzle falls behind, Loggregator will alert the nozzle in two ways:

- **TruncatingBuffer** alerts: If the nozzle is consuming messages more slowly than they are being produced, the loggregator system may drop messages. In this case, the loggregator system sends the log message `TB: Output channel too full. Dropped (n) messages`, where "n" is the number of dropped messages. It also emits a CounterEvent with the name `TruncatingBuffer.DroppedMessages`. The nozzle receives both messages from the Firehose, alerting the operator to the performance issue.

- **PolicyViolation** error: The Traffic Controller periodically sends `ping` control messages over the Firehose WebSocket connection. If a client does not respond to a `ping` message with a `pong` message within 30 seconds, the Traffic Controller closes the WebSocket connection with the WebSocket error code "ClosePolicyViolation" (1008). The nozzle should intercept this WebSocket close error, alerting the operator to the performance issue.

An operator can choose to scale her nozzles in response to these alerts, in order to minimize the loss of data.

## <a id='syslog-forward'></a> Managing Syslog Forwarding from <%= vars.product_full %> Components

Syslog data can be forwarded directly from <%= vars.product_full %> components to an external aggregator.

<% if vars.product_full == "Elastic Runtime"%>

Syslog forwarding for [Pivotal Cloud Foundry&reg;](https://network.pivotal.io/products/pivotal-cf) (PCF) is managed through the **PCF Ops Manager Installation Dashboard**. To enable syslog forwarding:

1. Click the **Elastic Runtime** tile.
1. Select **System Logging**.
1. Enter the Hostname, Port and Protocol for your third part log management service.
1. (Optional) Increase the drain buffer size to prevent loss of log data.
1. Click **Save**.
1. Click **Apply Changes**.
<%= image_tag 'ert_syslog_config.png' %>

<% elsif vars.product_full == "Cloud Foundry" %>

To do this, add the following properties to the `properties` hash in your CF deployment manifest.

```
properties:
  syslog_daemon_config:
  		address: YOUR-SYSLOG-AGGREGATOR-IP
       	port: YOUR-SYSLOG-AGGREGATOR-TCP-PORT
     	transport: YOUR-TRANSPORT-PROTOCOL
```
Replace `YOUR-TRANSPORT-PROTOCOL` with one of the following transport protocols:

- `tcp`
- `udp`
- `relp`

##   Customizing Loggregator Components ##

Each Loggregator component can be customized in many ways by changing its properties in the CF deployment manifest. Some of the most useful are detailed below.

### DEA Logging Agent ###
<%= partial 'manifest_properties/dea_logging_agent'%>

### Doppler ###
<%= partial 'manifest_properties/doppler' %>

### Traffic Controller ###
<%= partial 'manifest_properties/loggregator_trafficcontroller' %>

###  Metron Agent ###
<%= partial 'manifest_properties/metron_agent' %>

### Syslog Drain Binder###
See [Using Log Management Services](../devguide/services/log-management.html).
<%= partial 'manifest_properties/syslog_drain_binder' %>

<% end %>
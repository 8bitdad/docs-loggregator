---
title: Loggregator Guide for Cloud Foundry Operators
---

This topic contains information about the [Loggregator System](./architecture.html) that may be of use to operators of Cloud Foundry deployments.

## <a id='scaling'></a> Scaling Loggregator ##

[Dopplers](./architecture.html#doppler) have a limited buffer which is periodically forwarded to the [Traffic Controller](./architecture.html#traffic-controller). When input from [Metron](./architecture.html#metron) agents exceeds the buffer size for a given interval, log and metric data can be lost. There are several ways to minimize this loss:

- Increase buffer size.
- Add additional Doppler instances.

## <a id='scaling-nozzles'></a> Scaling Nozzles

[Nozzles](./architecture.html#nozzles) can be scaled by using the subscription ID, which is specified when the nozzle connects to the firehose. If you use the same subscription ID on each nozzle instance, the firehose will evenly distribute events across all instances of the nozzle. For example, if you have two nozzles with the same subscription ID, then half the events will go to one nozzle and half to the other. Similarly if there were three instances of the nozzle, then each instance would get one-third the traffic.

A stateless nozzle should handle scaling gracefully. But if the nozzle buffers or caches the data, the nozzle author must test what happens when the nozzle is scaled up or scaled down.

## <a id='slow-noz'></a> Slow Nozzle Alerts ##

The [Traffic Controller](./architecture.html#traffic-controller) is setup to alert nozzles who are slow at consuming events. If the nozzle is falling behind, the loggregator system will alert the nozzle in two ways:

- TruncatingBuffer alerts: If the nozzle is consuming messages slower than they are being produced, the loggregator system may try and help the nozzle catch up by dropping messages. When this happens the loggregator system will send a log message down the firehose saying "TB: Output channel too full. Dropped (n) messages", where "n" is the number of messages it dropped. It will also emit a CounterEvent with the name TruncatingBuffer.DroppedMessages. The nozzle will receive both these messages from the firehose and it should alert the operator that it's falling behind.

- PolicyViolation error: The traffic-controller periodically sends "ping" control messages over the firehose websocket connection. If the "ping" messages aren't replied with "pong" messages within 30 seconds, the traffic-controller will assume that the nozzle is slow and close the websocket connection with the websocket error code for "ClosePolicyViolation" (1008). The nozzle should intercept this websocket close error and alert the operator that it's falling behind.

Based on these slow alerts the operator can choose to scale up the nozzle.

## <a id='step-id'></a> Syslog Forwarding from <%= vars.product_full %> Components

Syslog data can be forarded directly from <%= vars.product_full %> components to an external aggregator. To do this, add the following properties to the `properties` hash in your CF deployment manifest.

```
properties:
  syslog_daemon_config:
  		address: YOUR-SYSLOG-AGGREGATOR-IP
       	port: YOUR-SYSLOG-AGGREGATOR-TCP-PORT      
     	transport: YOUR-TRANSPORT-PROTOCOL
```
Transport protocol must be one of the following:

- `tcp`
- `udp`
- `relp`

## <a id='customizing'></a> Customizing Loggregator Components ##

Each Loggregator component can be customized in many ways by changing its properties in the CF deployment manifest. Some of the most useful are detailed below.

### <a id='dea-agent'></a>DEA Logging Agent ###
<%= partial 'manifest_properties/dea_logging_agent'%>

### <a id='doppler'></a>Doppler ###
<%= partial 'manifest_properties/doppler' %>

### <a id='traffic-controller'></a>Traffic Controller ###
<%= partial 'manifest_properties/loggregator_trafficcontroller' %>
 
### <a id='metron'></a> Metron Agent ###
<%= partial 'manifest_properties/metron_agent' %>

### <a id='syslog-drain'></a>Syslog Drain Binder###
See [this thing](http://docs.pivotal.io/pivotalcf/devguide/services/log-management.html).
<%= partial 'manifest_properties/syslog_drain_binder' %>

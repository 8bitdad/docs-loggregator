---
title: Deploying a Nozzle to the Loggregator Firehose
---
<% $this_topic = 'nozzle-tutorial' %>

This topic will walk through the procedure for deploying a ['nozzle'](./architecture.html#nozzles) application to the Cloud Foundry [Loggregator Firehose](./architecture.html#firehose). The Loggregator team has prepared an example nozzle application for use with this tutorial.

The procedure described here will deploy this example nozzle to the Firehose of a Cloud Foundry deployed locally, with BOSH Lite. This is generally the easiest point of entry into Cloud Foundry operations.

## Prerequisites:

- [BOSH CLI](https://bosh.io/docs/bosh-cli.html) installed locally.
- Spiff installed locally and added to your shell's load path. [Spiff on GitHub](https://github.com/cloudfoundry-incubator/spiff).
- A BOSH Lite deployed locally using VirtualBox. See [BOSH lite on GitHub](https://github.com/cloudfoundry/bosh-lite).
- A working [Cloud Foundry](https://github.com/cloudfoundry/cf-release), including Loggregator, deployed with your local BOSH Lite. This will serve as our source of data. See [Deploying Cloud Foundry using BOSH Lite](http://docs.cloudfoundry.org/deploying/boshlite/deploy_cf_boshlite.html), or use the `provion_cf` script included in the [BOSH Lite release](https://github.com/cloudfoundry/bosh-lite#deploy-cloud-foundry).

<p class='note'><strong>Note</strong>: Even using the automated <code>provision_cf</code> script, Deploying Cloud Foundry can take up to several hours, depending on your internet bandwith.</p>

## <a id='dl-bosh-manifest'></a>Step 1: Download Your Cloud Foundry BOSH Manifest ##
<%= partial 'download_bosh_manifest' %>

## <a id='add-client'></a>Step 2: Add UAA client ##

You must authorize the example nozzle as a UAA client for your CF deployment. To do this, add an entry for the example nozzle as `client` for `uaa` under `properties` key in your CF deployment manifest. You must enter the example nozzle object in the right location in the manifest, and with the correct indentation, as described below.

<p class='note'>Deployment manifests have the <code>.yml</code> extension, and are therefore YAML files. Visit <a href='http://www.yaml.org/start.html'>YAML</a> on the web to learn about YAML syntax.
</p>

1.  Find the `properties` key that is at 0 indentation (left aligned).
1.  Under that `properties` key, find `uaa` at the next level of indentation.
1.  Under that `uaa` key, find the `clients` key at the next level of indentation.
1.  Enter properties for  the `example-nozzle` at the next level of indentation, exactly as below. The `...` in the figure below indicate that other properties may populate the manifest at each level in the hierarchy.

```
properties:
  ...
  uaa:
  ...
    clients:
    ...
      example-nozzle:
        access-token-validity: 1209600
        authorized-grant-types: authorization_code,client_credentials,refresh_token
        override: true
        secret: example-nozzle
        scope: openid,oauth.approvals,doppler.firehose
        authorities: oauth.login,doppler.firehose
```

5\. Save the manifest file `cf.yml`.

## <a id='redeploy'></a>Step 3: Redeploy Cloud Foundry ##

1. Select `cf.yml` as the manifest for your deployment.
<pre class='terminal'>
$ bosh deployment cf.yml
Deployment set to `/Users/example_user/workspace/bosh-lite/cf.yml'
</pre>

1. Deploy your Cloud Foundry with BOSH.
<pre class='terminal'>
$ bosh deploy
Acting as user 'admin' on deployment 'cf-warden' on 'Bosh Lite Director'
Getting deployment properties from director...<br>
Detecting deployment changes
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
Releases
No changes
<br>
Compilation
No changes
<br>
Update
No changes
<br>
Resource pools
No changes
<br>
Disk pools
No changes
<br>
Networks
No changes
<br>
Jobs
No changes
<br>
Properties
uaa
clients
example-nozzle
\+ access-token-validity: 1209600
\+ authorized-grant-types: authorization_code,client_credentials,refresh_token
\+ override: true
\+ secret: example-nozzle
\+ scope: openid,oauth.approvals,doppler.firehose
\+ authorities: oauth.login,doppler.firehose
<br>
Meta
No changes
<br>
Please review all changes carefully
<br>
Deploying
\-\-\-\-\-\-\-\-\-
Are you sure you want to deploy? (type 'yes' to continue):
</pre>


## <a id='dl-release'></a>Step 4: Clone example release ##

The Loggregator team has prepared an example nozzle application for use with this tutorial.

1. Run <code>git clone</code> to clone the main release repository from [GitHub](https://github.com/cloudfoundry-incubator/example-nozzle-release).
<pre class='terminal'>
$ git clone git@github.com:cloudfoundry-incubator/example-nozzle-release.git
Cloning into 'example-nozzle-release'...
</pre>

1. Run <code>git submodule update --init --recursive</code> to update all the included submodules.
<pre class='terminal'>
$ git submodule update --init --recursive
Submodule 'src/github.com/cloudfoundry-incubator/example-nozzle' (git@github.com:cloudfoundry-incubator/example-nozzle.git) registered for path 'src/github.com/cloudfoundry-incubator/example-nozzle'
Submodule 'src/github.com/cloudfoundry-incubator/uaago' (git@github.com:cloudfoundry-incubator/uaago.git) registered for path 'src/github.com/cloudfoundry-incubator/uaago'
...
Cloning into 'src/github.com/cloudfoundry-incubator/example-nozzle'...
...
</pre>

1. `cd` into the `example-release` directory.
<pre class='terminal'>
$ cd example-nozzle-release
</pre>

## <a id='step-id'></a>Step 5: Prepare the Nozzle manifest ##

There are two options for preparing the nozzle deployment manifest:

- (Quicker option) Our engineers have included a script to prepare the manifest in a single step. To use this option simply run the following in the terminal:
<pre class='terminal'>
$ scripts/make\_manifest\_spiff\_bosh\_lite
</pre>

- (Recommended, in order to fully understand the deployment procedure) Complete the following steps:

1. Inside `example-nozzle-release`, change into the `templates` directory.
<pre class='terminal'>
$ cd templates
</pre>
There are two yaml files inside:
	- `template.yml` is template for the manifest we will use to deploy the nozzle.
	- `bosh-lite-stub.yml` contains the values that will populate the missing information in the manifest template to complete our deployment manifest.

1. Make a `tmp` directory to house our compiled manifest.

1. Use spiff to compile a deployment manifest from the template and stub, and save this manifest.
<pre class='terminal'>
$ spiff merge templates/template.yml templates/bosh\-lite\-stub.yml > tmp/manifest\_bosh\_lite.yml
</pre>

1. Get your BOSH director UUID by running: <pre class='terminal'>$ bosh status --uuid</pre>

1. In the compiled nozzle deployment manifest, find the `director_uuid` property and replace its value of `PLACEHOLDER-DIRECTOR-UUID` with your BOSH director UUID.

```
compilation:
  cloud_properties:
    name: default
  network: example-nozzle-net
  reuse_compilation_vms: true
  workers: 1
director_uuid: PLACEHOLDER-DIRECTOR-UUID
```

## <a id='set-manifest'></a>Step 6: Select the new manifest as the deployment manifest for the nozzle##
<pre class='terminal'>
$ bosh deployment tmp/manifest_bosh_lite.yml
Deployment set to `/Users/example_user/workspace/example-nozzle-release/templates/tmp/manifest_bosh_lite.yml'
</pre>

## <a id='create'></a>Step 7: Create a BOSH release for the nozzle ##

Run the following terminal command, using the name `example-nozzle`, which matches the [UAA client created earlier](#add-client) in the CF deployment manifest:
<pre class='terminal'>
$ bosh create release --name example-nozzle
Syncing blobs...
...
</pre>


## <a id='upload'></a>Step 8: Upload the BOSH release ##
Run the following terminal command:
<pre class='terminal'>
$ bosh upload release
Acting as user 'admin' on 'Bosh Lite Director'
<br>
Copying packages
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
example-nozzle
golang1.4
<br>
Copying jobs
\-\-\-\-\-\-\-\-\-\-\-\-
example-nozzle
<br>
Generated /var/folders/4n/qs1rjbmd1c5gfb78m3_06j6r0000gn/T/d20151009-71219-17a5m49/d20151009-71219-rts928/release.tgz
Release size: 59.2M
<br>
Verifying release...
...
Release info
\-\-\-\-\-\-\-\-\-\-\-\-
Name: nozzle-test
Version: 0+dev.2
<br>
Packages
- example-nozzle (b0944f95eb5a332e9be2adfb4db1bc88f9755894)
- golang1.4 (b68dc9557ef296cb21e577c31ba97e2584a5154b)
<br>
Jobs
- example-nozzle (112e01c6ee91e8b268a42239e58e8e18e0360f58)
<br>
License
- none
<br>
<br>
Uploading release
</pre>


## <a id='deploy'></a>Step 9: Deploy the nozzle ##
Run the following terminal command:
<pre class='terminal'>
$ bosh deploy
Acting as user 'admin' on deployment 'example-nozzle-lite' on 'Bosh Lite Director'
Getting deployment properties from director...
Unable to get properties list from director, trying without it...
Cannot get current deployment information from director, possibly a new deployment
Please review all changes carefully
<br>
Deploying
\-\-\-\-\-\-\-\-\-
Are you sure you want to deploy? (type 'yes' to continue):
</pre>

## <a id='view'></a>Step 10: View the nozzle output ##

Congratulations! You have successfully deployed a Loggregator firehose nozzle.

The example nozzle simply dumps all of the data coming from the firehose to its log files. To view this data, SSH into the example-nozzle VM and examine the logs.



1. `ssh` into the nozzle vm at the IP configured in the nozzle's manifest template stub `./templates/bosh-lite-stub.yml`.
<pre class='terminal'>
bosh ssh example-nozzle --strict_host_key_checking no
<br>
Welcome to Ubuntu 14.04.1 LTS (GNU/Linux 3.19.0-25-generic x86_64)
<br>
 * Documentation:  https://help.ubuntu.com/
Last login: Wed Sep 23 21:29:50 2015 from 192.168.50.1
</pre>


1. `cat` out the `stdout` log file.
<pre class='terminal'>
$ cat /var/vcap/sys/log/example-nozzle/example-nozzle.stdout.log
<br>
===== Streaming Firehose (will only succeed if you have admin credentials)
origin:"DopplerServer" eventType:ValueMetric timestamp:1443046217700750747 deployment:"cf-warden" job:"doppler_z1" index:"0" ip:"10.244.0.142" valueMetric:<name:"messageRouter.numberOfFirehoseSinks" value:1 unit:"sinks" >
origin:"MetronAgent" eventType:CounterEvent timestamp:1443046218910193187 deployment:"cf-warden" job:"loggregator_trafficcontroller_z1" index:"0" ip:"10.244.0.146" counterEvent:<name:"dropsondeAgentListener.receivedByteCount" delta:771 total:386368 >
origin:"MetronAgent" eventType:CounterEvent timestamp:1443046218910360012 deployment:"cf-warden" job:"loggregator_trafficcontroller_z1" index:"0" ip:"10.244.0.146" counterEvent:<name:"dropsondeMarshaller.counterEventMarshalled" delta:8 total:2619 >
origin:"MetronAgent" eventType:CounterEvent timestamp:1443046218910252169 deployment:"cf-warden" job:"loggregator_trafficcontroller_z1" index:"0" ip:"10.244.0.146" counterEvent:<name:"dropsondeUnmarshaller.valueMetricReceived" delta:9 total:4525 >
origin:"MetronAgent" eventType:CounterEvent timestamp:1443046218910294255 deployment:"cf-warden" job:"loggregator_trafficcontroller_z1" index:"0" ip:"10.244.0.146" counterEvent:<name:"MessageAggregator.uncategorizedEvents" delta:9 total:4525 >
origin:"MetronAgent" eventType:CounterEvent timestamp:1443046218910318582 deployment:"cf-warden" job:"loggregator_trafficcontroller_z1" index:"0" ip:"10.244.0.146" counterEvent:<name:"dropsondeMarshaller.valueMetricMarshalled" delta:9 total:4525 >
origin:"MetronAgent" eventType:CounterEvent timestamp:1443046218910339088 deployment:"cf-warden" job:"loggregator_trafficcontroller_z1" index:"0" ip:"10.244.0.146" counterEvent:<name:"MessageAggregator.counterEventReceived" delta:8 total:2619 >
origin:"MetronAgent" eventType:CounterEvent timestamp:1443046218910379199 deployment:"cf-warden" job:"loggregator_trafficcontroller_z1" index:"0" ip:"10.244.0.146" counterEvent:<name:"DopplerForwarder.sentMessages" delta:17 total:7082 >
origin:"MetronAgent" eventType:CounterEvent timestamp:1443046218910394886 deployment:"cf-warden" job:"loggregator_trafficcontroller_z1" index:"0" ip:"10.244.0.146" counterEvent:<name:"dropsondeAgentListener.receivedMessageCount" delta:9 total:4525 >
origin:"router__0" eventType:HttpStartStop timestamp:1443046219105062148 deployment:"cf-warden" job:"router_z1" index:"0" ip:"10.244.0.22" httpStartStop:<startTimestamp:1443046219096144435 stopTimestamp:1443046219105062148 requestId:<low:7224371029360401779 high:6477133057804225906 > peerType:Client method:POST uri:"uaa.service.cf.internal:8080/oauth/token" remoteAddress:"" userAgent:"" statusCode:200 contentLength:-1 >
origin:"api_z1_0" eventType:HttpStartStop timestamp:1443046219109842455 deployment:"cf-warden" job:"api_z1" index:"0" ip:"10.244.0.134" httpStartStop:<startTimestamp:1443046219106687524 stopTimestamp:1443046219109842455 requestId:<low:7948515536237261025 high:3934284340053050957 > peerType:Server method:GET uri:"routing-api.service.cf.internal:3000/v1/routes" remoteAddress:"10.0.2.15:49577" userAgent:"Go 1.1 package http" statusCode:200 contentLength:108 >
origin:"router__0" eventType:HttpStartStop timestamp:1443046219110064368 deployment:"cf-warden" job:"router_z1" index:"0" ip:"10.244.0.22" httpStartStop:<startTimestamp:1443046219106025264 stopTimestamp:1443046219110064368 requestId:<low:7948515536237261025 high:3934284340053050957 > peerType:Client method:GET uri:"routing-api.service.cf.internal:3000/v1/routes" remoteAddress:"" userAgent:"" statusCode:200 contentLength:108 >
origin:"syslog_drain_binder" eventType:ValueMetric timestamp:1443046219177165446 deployment:"cf-warden" job:"doppler_z1" index:"0" ip:"10.244.0.142" valueMetric:<name:"logSenderTotalMessagesRead" value:0 unit:"count" >
origin:"syslog_drain_binder" eventType:ValueMetric timestamp:1443046219177288325 deployment:"cf-warden" job:"doppler_z1" index:"0" ip:"10.244.0.142" valueMetric:<name:"numGoRoutines" value:22 unit:"count" >
origin:"syslog_drain_binder" eventType:ValueMetric timestamp:1443046219177346726 deployment:"cf-warden" job:"doppler_z1" index:"0" ip:"10.244.0.142" valueMetric:<name:"memoryStats.numBytesAllocated" value:347992 unit:"count" >
origin:"syslog_drain_binder" eventType:ValueMetric timestamp:1443046219177274975 deployment:"cf-warden" job:"doppler_z1" index:"0" ip:"10.244.0.142" valueMetric:<name:"numCPUS" value:4 unit:"count" >
origin:"syslog_drain_binder" eventType:ValueMetric timestamp:1443046219177310389 deployment:"cf-warden" job:"doppler_z1" index:"0" ip:"10.244.0.142" valueMetric:<name:"memoryStats.numBytesAllocatedHeap" value:347992 unit:"count" >
origin:"syslog_drain_binder" eventType:ValueMetric timestamp:1443046219177330214 deployment:"cf-warden" job:"doppler_z1" index:"0" ip:"10.244.0.142" valueMetric:<name:"memoryStats.numBytesAllocatedStack" value:393216 unit:"count" >
origin:"syslog_drain_binder" eventType:ValueMetric timestamp:1443046219177353454 deployment:"cf-warden" job:"doppler_z1" index:"0" ip:"10.244.0.142" valueMetric:<name:"memoryStats.numMallocs" value:312614 unit:"count" >
origin:"syslog_drain_binder" eventType:ValueMetric timestamp:1443046219177360052 deployment:"cf-warden" job:"doppler_z1" index:"0" ip:"10.244.0.142" valueMetric:<name:"memoryStats.numFrees" value:309258 unit:"count" >
origin:"syslog_drain_binder" eventType:ValueMetric timestamp:1443046219177481456 deployment:"cf-warden" job:"doppler_z1" index:"0" ip:"10.244.0.142" valueMetric:<name:"memoryStats.lastGCPauseTimeNS" value:318837 unit:"count" >
origin:"DopplerServer" eventType:CounterEvent timestamp:1443046219880585603 deployment:"cf-warden" job:"doppler_z1" index:"0" ip:"10.244.0.142" counterEvent:<name:"dropsondeListener.receivedMessageCount" delta:59 total:61634 >
origin:"DopplerServer" eventType:CounterEvent timestamp:1443046219880895040 deployment:"cf-warden" job:"doppler_z1" index:"0" ip:"10.244.0.142" counterEvent:<name:"dropsondeListener.receivedByteCount" delta:9462 total:9111082 >
origin:"DopplerServer" eventType:CounterEvent timestamp:1443046219881017888 deployment:"cf-warden" job:"doppler_z1" index:"0" ip:"10.244.0.142" counterEvent:<name:"dropsondeUnmarshaller.httpStartStopReceived" delta:7 total:2191 >
origin:"DopplerServer" eventType:CounterEvent timestamp:1443046219881011670 deployment:"cf-warden" job:"doppler_z1" index:"0" ip:"10.244.0.142" counterEvent:<name:"dropsondeUnmarshaller.valueMetricReceived" delta:28 total:35309 >
origin:"DopplerServer" eventType:CounterEvent timestamp:1443046219880929574 deployment:"cf-warden" job:"doppler_z1" index:"0" ip:"10.244.0.142" counterEvent:<name:"dropsondeUnmarshaller.counterEventReceived" delta:24 total:24134 >
origin:"DopplerServer" eventType:CounterEvent timestamp:1443046219881004417 deployment:"cf-warden" job:"doppler_z1" index:"0" ip:"10.244.0.142" counterEvent:<name:"httpServer.receivedMessages" delta:59 total:61634 >
origin:"DopplerServer" eventType:CounterEvent timestamp:1443046219880929568 deployment:"cf-warden" job:"doppler_z1" index:"0" ip:"10.244.0.142" counterEvent:<name:"signatureVerifier.validSignatures" delta:59 total:61634 >
origin:"MetronAgent" eventType:CounterEvent timestamp:1443046220058280679 deployment:"cf-warden" job:"api_z1" index:"0" ip:"10.244.0.134" counterEvent:<name:"MessageAggregator.uncategorizedEvents" delta:44 total:12891 >


</pre>
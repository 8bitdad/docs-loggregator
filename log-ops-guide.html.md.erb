---
title: Loggregator Guide for Cloud Foundry Operators
owner: Logging and Metrics
---

<strong><%= modified_date %></strong>

This topic contains information for Cloud Foundry deployments operators about how to configure the [Loggregator system](./architecture.html) to avoid data loss with high volumes of logging and metrics data.

## <a id='scaling'></a> Scaling Loggregator ##

Most Loggregator configurations are set to use preferred resource defaults. If you want to customize these defaults or plan the capacity of your Loggregator system, see the formulas below.

### Doppler

Doppler resources can require scaling to accommodate your overall log volume and envelope size. <%= vars.product_full %> recommends the following formula for determining the number of Doppler instances you need to achieve a loss rate of &lt; 1%:

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>Number of Doppler instances = Number of logs per second / 800</em>

### Traffic Controller

Traffic Controller resources are usually scaled in line with Doppler resources: one Traffic Controller instance per four Doppler instances. <%= vars.product_full %> recommends the following formula for determining the number of Traffic Controller instances you need to achieve a loss rate of &lt; 1%:

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>Number of Traffic Controller instances = Number of logs per second / 3200</em>

In addition, Traffic Controller resources can require scaling to accommodate the number of your log streams and Firehose subscriptions.

<% if vars.product_name == 'CF' %>
<% else %>
<%= partial 'scaling_syslog_adapters' %>
<% end %>

See <%=vars.logg_scaling %> for more information about scaling the Loggregator system.

## <a id='scaling-nozzles'></a> Scaling Nozzles

The number of nozzle instances should match the number of Traffic Controller instances. You can scale a [nozzle](./architecture.html#nozzles) using the subscription ID specified when the nozzle connects to the Firehose.

If you use the same subscription ID on each nozzle instance, the Firehose evenly distributes events across all instances of the nozzle. For example, if you have two nozzles with the same subscription ID, the Firehose sends half of the events to one nozzle and half to the other. Similarly, if you have three nozzles with the same subscription ID, the Firehose sends each instance one-third of the event traffic.

Stateless nozzles should handle scaling gracefully. If a nozzle buffers or caches the data, the nozzle author must test the results of scaling the number of nozzle instances up or down.

## <a id='slow-noz'></a> Slow Nozzle Alerts ##

The [Traffic Controller](./architecture.html#traffic-controller) alerts nozzles if they consume events too slowly.
If a nozzle falls behind, Loggregator alerts the nozzle in two ways:

- **TruncatingBuffer** alerts: If the nozzle consumes messages more slowly than they are produced, the Loggregator system may drop messages. In this case, Loggregator sends the log message, `TB: Output channel too full. Dropped N messages`, where `N` is the number of dropped messages. Loggregator also emits a **CounterEvent** with the name `doppler_proxy.slow_consumer`. The nozzle receives both messages from the Firehose, alerting the operator to the performance issue.



## <a id='syslog-forward'></a> Forwarding Logs to an External Service ##

You can configure <%= vars.product_full %> to forward log data from components and apps to an external aggregator service instead of routing it to the Loggregator Firehose. <%=vars.logg_forwarding %> explains how to enable log forwarding by specifying the aggregator address, port, and protocol.

[Using Log Management Services](../devguide/services/log-management.html) explains how to bind applications to the external service and configure it to receive logs from <%= vars.product_full %>.

## <a id='log-message-size'></a> Log Message Size Constraints

The Diego cell emits application logs as UDP messages to the Metron.
Diego breaks up log messages greater than approximately 60KiB into multiple envelopes to mitigate this constraint.

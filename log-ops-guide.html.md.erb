---
title: Loggregator Guide for Cloud Foundry Operators
---

<strong><%= modified_date %></strong>

This topic contains information about the [Loggregator System](./architecture.html) for Cloud Foundry deployments operators.

## <a id='scaling'></a> Scaling Loggregator ##

[Doppler](./architecture.html#doppler) components accept log and metric data from <%= vars.product_full %> system components. Dopplers store this data in a buffer before periodically forwarding it to the [Traffic Controller](./architecture.html#traffic-controller), which serves up the aggregated data stream through the Firehose WebSocket endpoint. When input from [Metron](./architecture.html#metron) agents exceeds a Doppler's buffer size for a given interval, log and metric data can be lost. You can take several actions to minimize this loss.

<%= partial vars.logg_scaling %>

## <a id='scaling-nozzles'></a> Scaling Nozzles

You can scale [nozzles](./architecture.html#nozzles) using the subscription ID, specified when the nozzle connects to the Firehose. If you use the same subscription ID on each nozzle instance, the Firehose evenly distributes events across all instances of the nozzle. For example, if you have two nozzles with the same subscription ID, the Firehose sends half of the events to one nozzle and half to the other. Similarly, if you have three nozzles with the same subscription ID, the Firehose sends each instance one-third of the event traffic.

Stateless nozzles should handle scaling gracefully. If a nozzle buffers or caches the data, the nozzle author must test the results of scaling the number of nozzle instances up or down.

## <a id='slow-noz'></a> Slow Nozzle Alerts ##

The [Traffic Controller](./architecture.html#traffic-controller) alerts nozzles if they consume events too slowly. 
If a nozzle falls behind, Loggregator alerts the nozzle in two ways:

- **TruncatingBuffer** alerts: If the nozzle consumes messages more slowly than they are produced, the Loggregator system may drop messages. In this case, Loggregator sends the log message, `TB: Output channel too full. Dropped (n) messages`, where "n" is the number of dropped messages. Loggregator also emits a **CounterEvent** with the name `TruncatingBuffer.DroppedMessages`. The nozzle receives both messages from the Firehose, alerting the operator to the performance issue.

- **PolicyViolation** error: The Traffic Controller periodically sends `ping` control messages over the Firehose WebSocket connection. If a client does not respond to a `ping` with a `pong` message within 30 seconds, the Traffic Controller closes the WebSocket connection with the WebSocket error code `ClosePolicyViolation (1008)`. The nozzle should intercept this WebSocket close error, alerting the operator to the performance issue.

An operator can scale the number of nozzles in response to these alerts to minimize the loss of data.

## <a id='syslog-forward'></a> Managing Syslog Forwarding ##

Syslog data can be forwarded directly from <%= vars.product_full %> components to an external aggregator.

<%= partial vars.logg_syslog_forwarding %>

<%= partial vars.logg_customizing %>
